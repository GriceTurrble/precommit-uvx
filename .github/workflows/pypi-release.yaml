## Build and release a Python package to PyPI.

## This is a very basic workflow suitable for releasing a project of pure Python code,
## with no need to build against many architectures.

## You will first need to start from pypi.org itself
## and configure this workflow as a trusted publisher.
## See:
## - Creating a PyPI project with a Trusted Publisher: https://docs.pypi.org/trusted-publishers/creating-a-project-through-oidc/
## - Adding a Trusted Publisher to an existing PyPI project: https://docs.pypi.org/trusted-publishers/adding-a-publisher/
## ...etc.

## This is triggered on creation of a GitHub release, which involves a git tag and artifact uploads.
## However, the tag and the project version must be kept in sync manually.
## The version in pyproject.toml is what will be built and released,
## NOT the git tag.

# name: Release to PyPI
# on:
#   # Creating the release in GitHub triggers our upload.
#   release:
#     types: [published]

# env:
#   # Name of the project as it should appear on pypi.
#   # This should match the `[project].name` field in pyproject.toml.
#   PROJECT_NAME: "super-awesome-name"

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     environment:
#       name: pypi
#       url: https://pypi.org/p/${{ env.PROJECT_NAME }}
#     permissions:
#       # We need to upload artifacts to a GitHub Release:
#       contents: write
#       # We need to interact with OpenID Connect (OIDC) tokens:
#       id-token: write
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           persist-credentials: false
#       - uses: astral-sh/setup-uv@v5
#       - run: uv build
#       - run: uv publish
#       - name: Upload build artifacts to GitHub release
#         env:
#           GITHUB_TOKEN: ${{ github.token }}
#         run: >-
#           gh release upload
#           "$GITHUB_REF_NAME" dist/**
#           --repo "$GITHUB_REPOSITORY"
